@page "/video"
@using System.IO
@inject IJSRuntime JSRuntime

<h1>Blazor Webcam</h1>
<video id="videoFeed" width="400" height="400" /><canvas class="d-none" id="currentFrame" width="400" height="400" /><br />
<button class="btn btn-primary mb-3" @onclick="CaptureFrame">Capture Frame</button> <br />
@if (!string.IsNullOrEmpty(frameUri))
{
    <img src="@frameUri" />
}
<p>@DecodedTextFromVideo</p>


@code {
    private string frameUri;
    public string DecodedTextFromVideo = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");
    }

    public string ByteArrayToBase64DataUrl(byte[] byteArray, string format = "image/*")
    {
        var base64String = Convert.ToBase64String(byteArray);
        return $"data:{format};base64,{base64String}";


    }
    public byte[] Base64DataUrlToByteArray(string dataUrl)
    {
        string[] dataString = dataUrl.Split(";");
        string[] dataBase64String = dataString[1].Split(",");
        string base64String = dataBase64String[1];
        return Convert.FromBase64String(base64String);
    }
    public string GetBarcodeFromBase64DataUrl( string dataUrl)
    {
        byte[] imageBytes = Base64DataUrlToByteArray(dataUrl);
        //Stream stream = new MemoryStream(imageBytes);

        try
        {
            using (var image = SixLabors.ImageSharp.Image.Load<SixLabors.ImageSharp.PixelFormats.Rgba32>(imageBytes))
            {
                var reader = new ZXing.ImageSharp.BarcodeReader<SixLabors.ImageSharp.PixelFormats.Rgba32>();
                var result = reader.Decode(image);
                return result?.Text;
            }
        }
        catch (Exception exc)
        {
            return exc.Message;
        }

    }

    private async Task CaptureFrame()
    {
        frameUri =  await JSRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
        string decodedFromFrame = GetBarcodeFromBase64DataUrl(frameUri);
        DecodedTextFromVideo = decodedFromFrame;
        StateHasChanged();
    }

}
